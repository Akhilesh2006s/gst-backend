import jsPDF from 'jspdf';

export interface PDFData {
  title: string;
  number: string;
  date: string;
  companyName?: string;
  customerName?: string;
  items?: Array<{
    description: string;
    quantity?: number;
    unitPrice?: number;
    total?: number;
    [key: string]: any;
  }>;
  total?: number;
  status?: string;
  [key: string]: any;
}

export const generatePDF = (data: PDFData, type: string = 'document') => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  let yPosition = 20;

  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(data.title.toUpperCase(), pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 10;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`${data.title} #: ${data.number}`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Company and Customer Info
  if (data.companyName || data.customerName) {
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    
    if (data.companyName) {
      doc.text('From:', 20, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(data.companyName, 20, yPosition + 7);
      yPosition += 20;
    }

    if (data.customerName) {
      doc.setFont('helvetica', 'bold');
      doc.text('To:', 20, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(data.customerName, 20, yPosition + 7);
      yPosition += 20;
    }
  }

  // Date and Status
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Date: ${data.date}`, 20, yPosition);
  if (data.status) {
    doc.text(`Status: ${data.status}`, pageWidth - 60, yPosition);
  }
  yPosition += 15;

  // Items Table
  if (data.items && data.items.length > 0) {
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    
    // Table headers
    const headers = ['Description', 'Qty', 'Rate', 'Amount'];
    const colWidths = [80, 30, 30, 30];
    let xPosition = 20;
    
    headers.forEach((header, index) => {
      doc.text(header, xPosition, yPosition);
      xPosition += colWidths[index];
    });
    
    yPosition += 5;
    doc.line(20, yPosition, pageWidth - 20, yPosition); // Header line
    yPosition += 10;

    // Table rows
    doc.setFont('helvetica', 'normal');
    data.items.forEach((item) => {
      if (yPosition > pageHeight - 30) {
        doc.addPage();
        yPosition = 20;
      }

      xPosition = 20;
      const rowData = [
        item.description || '',
        item.quantity?.toString() || '',
        item.unitPrice ? `₹${item.unitPrice.toFixed(2)}` : '',
        item.total ? `₹${item.total.toFixed(2)}` : ''
      ];

      rowData.forEach((cell, index) => {
        doc.text(cell, xPosition, yPosition);
        xPosition += colWidths[index];
      });
      
      yPosition += 8;
    });

    // Total
    if (data.total) {
      yPosition += 10;
      doc.line(20, yPosition, pageWidth - 20, yPosition);
      yPosition += 10;
      doc.setFont('helvetica', 'bold');
      doc.text(`Total: ₹${data.total.toFixed(2)}`, pageWidth - 80, yPosition);
    }
  } else {
    // For non-item documents, display key-value pairs
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    Object.keys(data).forEach((key) => {
      if (!['title', 'number', 'date', 'companyName', 'customerName', 'items', 'total'].includes(key)) {
        const value = data[key];
        if (value && typeof value !== 'object') {
          doc.text(`${key}: ${value}`, 20, yPosition);
          yPosition += 8;
        }
      }
    });
  }

  // Footer
  yPosition = pageHeight - 20;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by Invoice Swift', pageWidth / 2, yPosition, { align: 'center' });

  // Save the PDF
  const fileName = `${data.title.toLowerCase().replace(/\s+/g, '_')}_${data.number}.pdf`;
  doc.save(fileName);
};

export const viewPDF = (data: PDFData, type: string = 'document') => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const pageHeight = doc.internal.pageSize.height;
  let yPosition = 20;

  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text(data.title.toUpperCase(), pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 10;

  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`${data.title} #: ${data.number}`, pageWidth / 2, yPosition, { align: 'center' });
  yPosition += 15;

  // Company and Customer Info
  if (data.companyName || data.customerName) {
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    
    if (data.companyName) {
      doc.text('From:', 20, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(data.companyName, 20, yPosition + 7);
      yPosition += 20;
    }

    if (data.customerName) {
      doc.setFont('helvetica', 'bold');
      doc.text('To:', 20, yPosition);
      doc.setFont('helvetica', 'normal');
      doc.text(data.customerName, 20, yPosition + 7);
      yPosition += 20;
    }
  }

  // Date and Status
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Date: ${data.date}`, 20, yPosition);
  if (data.status) {
    doc.text(`Status: ${data.status}`, pageWidth - 60, yPosition);
  }
  yPosition += 15;

  // Items Table
  if (data.items && data.items.length > 0) {
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(10);
    
    // Table headers
    const headers = ['Description', 'Qty', 'Rate', 'Amount'];
    const colWidths = [80, 30, 30, 30];
    let xPosition = 20;
    
    headers.forEach((header, index) => {
      doc.text(header, xPosition, yPosition);
      xPosition += colWidths[index];
    });
    
    yPosition += 5;
    doc.line(20, yPosition, pageWidth - 20, yPosition); // Header line
    yPosition += 10;

    // Table rows
    doc.setFont('helvetica', 'normal');
    data.items.forEach((item) => {
      if (yPosition > pageHeight - 30) {
        doc.addPage();
        yPosition = 20;
      }

      xPosition = 20;
      const rowData = [
        item.description || '',
        item.quantity?.toString() || '',
        item.unitPrice ? `₹${item.unitPrice.toFixed(2)}` : '',
        item.total ? `₹${item.total.toFixed(2)}` : ''
      ];

      rowData.forEach((cell, index) => {
        doc.text(cell, xPosition, yPosition);
        xPosition += colWidths[index];
      });
      
      yPosition += 8;
    });

    // Total
    if (data.total) {
      yPosition += 10;
      doc.line(20, yPosition, pageWidth - 20, yPosition);
      yPosition += 10;
      doc.setFont('helvetica', 'bold');
      doc.text(`Total: ₹${data.total.toFixed(2)}`, pageWidth - 80, yPosition);
    }
  } else {
    // For non-item documents, display key-value pairs
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    Object.keys(data).forEach((key) => {
      if (!['title', 'number', 'date', 'companyName', 'customerName', 'items', 'total'].includes(key)) {
        const value = data[key];
        if (value && typeof value !== 'object') {
          doc.text(`${key}: ${value}`, 20, yPosition);
          yPosition += 8;
        }
      }
    });
  }

  // Footer
  yPosition = pageHeight - 20;
  doc.setFontSize(8);
  doc.setFont('helvetica', 'italic');
  doc.text('Generated by Invoice Swift', pageWidth / 2, yPosition, { align: 'center' });

  // Open in new window
  const pdfBlob = doc.output('blob');
  const pdfUrl = URL.createObjectURL(pdfBlob);
  window.open(pdfUrl, '_blank');
};
